// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview


package allproducts

import (
	"testing"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"reflect"
)

// Mocking the Repository interface
type MockRepository struct {
	mock.Mock
}

func (mock *MockRepository) FindAll() ([]AllProduct, error) {
	args := mock.Called()
	return args.Get(0).([]AllProduct), args.Error(1)
}

func (mock *MockRepository) FindByID(ID int) (AllProduct, error) {
	args := mock.Called(ID)
	return args.Get(0).(AllProduct), args.Error(1)
}

func (mock *MockRepository) FindByCategory(category string) ([]AllProduct, error) {
	args := mock.Called(category)
	return args.Get(0).([]AllProduct), args.Error(1)
}

func (mock *MockRepository) FindByUser(email_user string) ([]AllProduct, error) {
	args := mock.Called(email_user)
	return args.Get(0).([]AllProduct), args.Error(1)
}

func (mock *MockRepository) FindByNameProduct(name_product string, price string, email_user string) (AllProduct, error) {
	args := mock.Called(name_product, price, email_user)
	return args.Get(0).(AllProduct), args.Error(1)
}

func (mock *MockRepository) Create(allProduct AllProduct) (AllProduct, error) {
	args := mock.Called(allProduct)
	return args.Get(0).(AllProduct), args.Error(1)
}

func (mock *MockRepository) Update(allProduct AllProduct) (AllProduct, error) {
	args := mock.Called(allProduct)
	return args.Get(0).(AllProduct), args.Error(1)
}

func (mock *MockRepository) Delete(allProduct AllProduct) (AllProduct, error) {
	args := mock.Called(allProduct)
	return args.Get(0).(AllProduct), args.Error(1)
}

// TestUpdatePositiveCase tests the positive scenario where product update should succeed
func TestUpdatePositiveCase(t *testing.T) {
	mockRepo := new(MockRepository)
	service := NewService(mockRepo)
	product := AllProduct{
		ID:           1,
		Name_product: "Test Product",
		Price:        100,
	}
	updatedProduct := product
	updatedProduct.Price = 200

	mockRepo.On("FindByID", product.ID).Return(product, nil)
	mockRepo.On("Update", mock.AnythingOfType("AllProduct")).Return(updatedProduct, nil)

	updateRequest := AllProductRequest{
		Name_product: "Test Product",
		Price:        *new(int32),
	}
	*updateRequest.Price = 200

	resultProduct, err := service.Update(product.ID, updateRequest)

	assert.Nil(t, err)
	assert.Equal(t, updatedProduct, resultProduct)
	mockRepo.AssertExpectations(t)
}

// TestUpdateNegativeCase tests the negative scenario where the product update fails
func TestUpdateNegativeCase(t *testing.T) {
	mockRepo := new(MockRepository)
	service := NewService(mockRepo)
	product := AllProduct{
		ID:           1,
		Name_product: "Test Product",
		Price:        100,
	}
	updatedProduct := product
	updatedProduct.Price = 200

	mockRepo.On("FindByID", product.ID).Return(AllProduct{}, assert.AnError)
	
	updateRequest := AllProductRequest{
		Name_product: "Test Product",
		Price:        *new(int32),
	}
	*updateRequest.Price = 200

	resultProduct, err := service.Update(product.ID, updateRequest)

	assert.NotNil(t, err)
	assert.NotEqual(t, updatedProduct, resultProduct)
	mockRepo.AssertExpectations(t)
}

