// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview

package allproducts

import (
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

// MockRepository is a mock of the Repository interface
type MockRepository struct {
	mock.Mock
}

func (m *MockRepository) Update(product AllProduct) (AllProduct, error) {
	args := m.Called(product)
	return args.Get(0).(AllProduct), args.Error(1)
}

func (m *MockRepository) FindByID(ID int) (AllProduct, error) {
	args := m.Called(ID)
	return args.Get(0).(AllProduct), args.Error(1)
}

func TestService_Update_Success(t *testing.T) {
	mockRepo := new(MockRepository)
	testService := NewService(mockRepo)
	testProduct := AllProduct{ID: 1, Name_product: "Original", Price: 1000}
	updatedProduct := AllProduct{ID: 1, Name_product: "Updated", Price: 2000}
	allProductRequest := AllProductRequest{Name_product: "Updated", Price: "2000"}

	mockRepo.On("FindByID", 1).Return(testProduct, nil)
	mockRepo.On("Update", mock.AnythingOfType("AllProduct")).Return(updatedProduct, nil)

	result, err := testService.Update(1, allProductRequest)

	assert.Nil(t, err)
	assert.NotNil(t, result)
	assert.Equal(t, updatedProduct, result)
	mockRepo.AssertExpectations(t)
}

func TestService_Update_Failure(t *testing.T) {
	mockRepo := new(MockRepository)
	testService := NewService(mockRepo)
	testProduct := AllProduct{ID: 1, Name_product: "Original", Price: 1000}
	allProductRequest := AllProductRequest{Name_product: "Invalid", Price: "wrong"}

	mockRepo.On("FindByID", 1).Return(testProduct, nil)
	mockRepo.On("Update", mock.AnythingOfType("AllProduct")).Return(AllProduct{}, errors.New("update failed"))

	result, err := testService.Update(1, allProductRequest)

	assert.NotNil(t, err)
	assert.Equal(t, AllProduct{}, result)
	assert.EqualError(t, err, "update failed")
	mockRepo.AssertExpectations(t)
}

