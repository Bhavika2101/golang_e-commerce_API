// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview


package allproducts_test

import (
	"testing"
	"github.com/stretchr/testify/assert"
	"myproject/allproducts"
)

// MockRepository is a mock of the Repository interface
type MockRepository struct {
	// Add fields/methods you need to simulate the behavior of your repository
}

// FindByCategory will simulate database behavior based on the input
func (m *MockRepository) FindByCategory(category string) ([]allproducts.AllProduct, error) {
	if category == "invalid" {
		return nil, allproducts.ErrNotFound
	}
	// Return some dummy data for the sake of this test
	return []allproducts.AllProduct{
		{Name_product: "Dummy Product 1", Category: category},
		{Name_product: "Dummy Product 2", Category: category},
	}, nil
}

// TestFindByCategory_Success simulates the behavior when a valid category is provided
func TestFindByCategory_Success(t *testing.T) {
	// Arrange
	mockRepo := new(MockRepository)
	service := allproducts.NewService(mockRepo)
	expected := []allproducts.AllProduct{
		{Name_product: "Dummy Product 1", Category: "test"},
		{Name_product: "Dummy Product 2", Category: "test"},
	}

	// Act
	result, err := service.FindByCategory("test")

	// Assert
	assert.Nil(t, err)
	assert.Equal(t, expected, result)
}

// TestFindByCategory_Failure simulates the behavior when an invalid category is provided
func TestFindByCategory_Failure(t *testing.T) {
	// Arrange
	mockRepo := new(MockRepository)
	service := allproducts.NewService(mockRepo)

	// Act
	result, err := service.FindByCategory("invalid")

	// Assert
	assert.Nil(t, result)
	assert.Equal(t, allproducts.ErrNotFound, err)
}

