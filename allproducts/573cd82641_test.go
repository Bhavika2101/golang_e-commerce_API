// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview

package allproducts_test // use a separate package for black box testing

import (
	"allproducts"
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

// MockRepository is a mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Create is the mock method for the Create method in the Repository interface
func (_m *MockRepository) Create(book allproducts.AllProduct) (allproducts.AllProduct, error) {
	ret := _m.Called(book)

	var r0 allproducts.AllProduct
	if rf, ok := ret.Get(0).(func(allproducts.AllProduct) allproducts.AllProduct); ok {
		r0 = rf(book)
	} else {
		r0 = ret.Get(0).(allproducts.AllProduct)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(allproducts.AllProduct) error); ok {
		r1 = rf(book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func TestService_Create_Success(t *testing.T) {
	mockRepo := new(MockRepository)
	testService := allproducts.NewService(mockRepo)

	testProduct := allproducts.AllProductRequest{
		Name_product: "Laptop X",
		Image_url:    "http://example.com/laptop-x.jpg",
		Description:  "A powerful laptop",
		Price:        1000,
		Name_user:    "Jane Doe",
		Email_user:   "jane.doe@example.com",
		Category:     "Electronics",
	}

	expectedProduct := allproducts.AllProduct{
		Name_product: "Laptop X",
		Image_url:    "http://example.com/laptop-x.jpg",
		Description:  "A powerful laptop",
		Price:        1000,
		Name_user:    "Jane Doe",
		Email_user:   "jane.doe@example.com",
		Category:     "Electronics",
	}

	mockRepo.On("Create", mock.AnythingOfType("AllProduct")).Return(expectedProduct, nil)

	createdProduct, err := testService.Create(testProduct)

	mockRepo.AssertExpectations(t)
	assert.NoError(t, err)
	assert.Equal(t, expectedProduct, createdProduct)
}

func TestService_Create_Failure(t *testing.T) {
	mockRepo := new(MockRepository)
	testService := allproducts.NewService(mockRepo)

	testProduct := allproducts.AllProductRequest{
		Name_product: "Laptop X",
		Image_url:    "http://example.com/laptop-x.jpg",
		Description:  "A powerful laptop",
		Price:        1000,
		Name_user:    "Jane Doe",
		Email_user:   "jane.doe@example.com",
		Category:     "Electronics",
	}

	mockRepo.On("Create", mock.AnythingOfType("AllProduct")).Return(allproducts.AllProduct{}, errors.New("creation failed"))

	createdProduct, err := testService.Create(testProduct)

	mockRepo.AssertExpectations(t)
	assert.Error(t, err)
	assert.Equal(t, allproducts.AllProduct{}, createdProduct)
}

