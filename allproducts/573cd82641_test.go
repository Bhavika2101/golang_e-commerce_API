// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview


package allproducts_test

import (
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"your_project/allproducts"
)

// Mock repository to avoid interaction with the database
type MockRepository struct {
	mock.Mock
}

func (m *MockRepository) Create(book allproducts.AllProduct) (allproducts.AllProduct, error) {
	args := m.Called(book)
	return args.Get(0).(allproducts.AllProduct), args.Error(1)
}

// Positive test case: when Create is expected to succeed
func TestCreate_Success(t *testing.T) {
	// Arrange
	mockRepo := new(MockRepository)
	s := allproducts.NewService(mockRepo)
	request := allproducts.AllProductRequest{
		Name_product: "Test Product",
		Image_url:    "http://example.com/image.jpg",
		Description:  "Test Description",
		Price:        100, // assuming price is int for mock data
		Name_user:    "Test User",
		Email_user:   "test@example.com",
		Category:     "TestCategory",
	}

	expectedProduct := allproducts.AllProduct{
		Name_product: request.Name_product,
		Image_url:    request.Image_url,
		Description:  request.Description,
		Price:        request.Price,
		Name_user:    request.Name_user,
		Email_user:   request.Email_user,
		Category:     request.Category,
	}

	mockRepo.On("Create", mock.Anything).Return(expectedProduct, nil)

	// Act
	product, err := s.Create(request)

	// Assert
	assert.Nil(t, err)
	assert.Equal(t, expectedProduct, product)
	mockRepo.AssertExpectations(t)
}

// Negative test case: when Create fails
func TestCreate_Failure(t *testing.T) {
	// Arrange
	mockRepo := new(MockRepository)
	s := allproducts.NewService(mockRepo)
	request := allproducts.AllProductRequest{
		Name_product: "Test Product",
		Image_url:    "http://example.com/image.jpg",
		Description:  "Test Description",
		Price:        100, // assuming price is int for mock data
		Name_user:    "Test User",
		Email_user:   "test@example.com",
		Category:     "TestCategory",
	}

	mockRepo.On("Create", mock.Anything).Return(allproducts.AllProduct{}, errors.New("creation failed"))

	// Act
	product, err := s.Create(request)

	// Assert
	assert.NotNil(t, err)
	assert.Equal(t, "creation failed", err.Error())
	assert.Equal(t, allproducts.AllProduct{}, product)
	mockRepo.AssertExpectations(t)
}

