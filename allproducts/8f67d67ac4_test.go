// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview

package allproducts_test

import (
	"errors"
	"reflect"
	"testing"

	"github.com/stretchr/testify/mock"
	"golang-e-commerce-api/allproducts"
)

type MockRepository struct {
	mock.Mock
}

func (mock *MockRepository) FindByNameProduct(name_product string, price string, email_user string) (allproducts.AllProduct, error) {
	args := mock.Called(name_product, price, email_user)
	return args.Get(0).(allproducts.AllProduct), args.Error(1)
}

// ... other mock methods

func TestFindByNameProduct_Positive(t *testing.T) {
	repo := new(MockRepository)
	service := allproducts.NewService(repo)
	product := allproducts.AllProduct{
		ID:           1,
		Name_product: "Test Product",
		Price:        100,
	}

	repo.On("FindByNameProduct", mock.Anything, mock.Anything, mock.Anything).Return(product, nil)

	result, err := service.FindByNameProduct("Test Product", "100", "email@example.com")
	if err != nil {
		t.Errorf("Expecting no error, but got %v", err)
	}

	if !reflect.DeepEqual(result, product) {
		t.Errorf("Expecting product %v, but got %v", product, result)
	}
}

func TestFindByNameProduct_Negative_NoProduct(t *testing.T) {
	repo := new(MockRepository)
	service := allproducts.NewService(repo)
	expectedError := errors.New("product not found")

	repo.On("FindByNameProduct", mock.Anything, mock.Anything, mock.Anything).Return(allproducts.AllProduct{}, expectedError)

	_, err := service.FindByNameProduct("Nonexistent Product", "0", "email@example.com")
	if err == nil || err.Error() != expectedError.Error() {
		t.Errorf("Expecting error '%v', but got '%v'", expectedError, err)
	}
}

