// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview

package allproducts

import (
    "testing"
    "errors"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/mock"
)

type MockRepository struct {
    mock.Mock
}

func (mock *MockRepository) FindByNameProduct(name_product string, price string, email_user string) (AllProduct, error) {
    args := mock.Called(name_product, price, email_user)
    return args.Get(0).(AllProduct), args.Error(1)
}

func TestFindByNameProduct_Success(t *testing.T) {
    // Arrange
    product := AllProduct{
        ID:          1,
        NameProduct: "Test Product",
        Price:       "100",
        EmailUser:   "test@example.com",
    }
    mockRepo := new(MockRepository)
    mockRepo.On("FindByNameProduct", "Test Product", "100", "test@example.com").Return(product, nil)
    
    testService := NewService(mockRepo)
    
    // Act
    result, err := testService.FindByNameProduct("Test Product", "100", "test@example.com")
    
    // Assert
    assert.NoError(t, err)
    assert.NotNil(t, result)
    assert.Equal(t, product, result)
    mockRepo.AssertExpectations(t)
}

func TestFindByNameProduct_Failure(t *testing.T) {
    // Arrange
    mockRepo := new(MockRepository)
    mockRepo.On("FindByNameProduct", "Nonexistent Product", "", "").Return(AllProduct{}, errors.New("product not found"))
    
    testService := NewService(mockRepo)
    
    // Act
    result, err := testService.FindByNameProduct("Nonexistent Product", "", "")
    
    // Assert
    assert.Error(t, err)
    assert.Equal(t, "product not found", err.Error())
    assert.Equal(t, AllProduct{}, result)
    mockRepo.AssertExpectations(t)
}

