// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview

package allproducts_test

import (
	"errors"
	"allproducts"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

type MockRepository struct {
	mock.Mock
}

func (m *MockRepository) FindByNameProduct(name_product string, price string, email_user string) (allproducts.AllProduct, error) {
	args := m.Called(name_product, price, email_user)
	return args.Get(0).(allproducts.AllProduct), args.Error(1)
}

func (m *MockRepository) Update(allProduct allproducts.AllProduct) (allproducts.AllProduct, error) {
	args := m.Called(allProduct)
	return args.Get(0).(allproducts.AllProduct), args.Error(1)
}

func TestUpdateByNameProduct_Success(t *testing.T) {
	repo := new(MockRepository)
	allProduct := allproducts.AllProduct{
		Name_product: "Laptop",
		Price:        1200,
		Email_user:   "user@example.com",
	}
	updateReq := allproducts.AllProductRequest{
		Name_product: "Laptop Pro",
		Price:        "1600",
		Email_user:   "user@example.com",
	}

	repo.On("FindByNameProduct", "Laptop", "1200", "user@example.com").Return(allProduct, nil)
	repo.On("Update", mock.AnythingOfType("allproducts.AllProduct")).Return(allProduct, nil)

	service := allproducts.NewService(repo)
	updatedProduct, err := service.UpdateByNameProduct("Laptop", "1200", "user@example.com", updateReq)

	assert.Nil(t, err)
	assert.Equal(t, updatedProduct.Name_product, updateReq.Name_product)
	assert.Equal(t, updatedProduct.Price, 1600)
	assert.Equal(t, updatedProduct.Email_user, updateReq.Email_user)
	repo.AssertExpectations(t)
}

func TestUpdateByNameProduct_Failure(t *testing.T) {
	repo := new(MockRepository)
	updateReq := allproducts.AllProductRequest{
		Name_product: "Laptop Pro",
		Price:        "1600",
		Email_user:   "user@example.com",
	}

	repo.On("FindByNameProduct", "Laptop", "1200", "user@example.com").Return(allproducts.AllProduct{}, errors.New("product not found"))
	repo.On("Update", mock.AnythingOfType("allproducts.AllProduct")).Return(allproducts.AllProduct{}, nil)

	service := allproducts.NewService(repo)
	_, err := service.UpdateByNameProduct("Laptop", "1200", "user@example.com", updateReq)

	assert.NotNil(t, err)
	assert.Equal(t, "product not found", err.Error())
	repo.AssertExpectations(t)
}

