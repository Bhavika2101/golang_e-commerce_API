// ********RoostGPT********
/*
Test generated by RoostGPT for test java-restassured using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=DeleteByNameProduct_83856bae22
ROOST_METHOD_SIG_HASH=DeleteByNameProduct_97a89c64ca

Scenario 1: Successful Deletion of a Product by Name

Details:
  Description: This test is meant to check if the function "DeleteByNameProduct" can successfully delete a product by its name, price, and user email. The target scenario is when a valid product name, price, and user email are provided, and the product exists in the repository.
Execution:
  Arrange: Mock the repository's "FindByNameProduct" and "Delete" methods. The first should return a valid AllProduct object and the second should return the same object without error.
  Act: Invoke "DeleteByNameProduct" with the name, price, and email of the existing product.
  Assert: Use Go testing facilities to verify that the returned product matches the expected product and that no error is returned.
Validation:
  The assertion checks that the function operates as expected under normal conditions. The test is important to ensure that the function can successfully delete a product by its name, price, and user email.

Scenario 2: Deletion of a Non-Existent Product

Details:
  Description: This test is meant to check how the function "DeleteByNameProduct" handles the scenario where the product to be deleted does not exist in the repository. This can occur when an invalid product name, price, or user email is provided.
Execution:
  Arrange: Mock the repository's "FindByNameProduct" method to return an error indicating that the product was not found.
  Act: Invoke "DeleteByNameProduct" with the name, price, and email of a non-existent product.
  Assert: Use Go testing facilities to verify that an error is returned.
Validation:
  The assertion checks that the function correctly handles the case where the product to be deleted does not exist. This is important to ensure that the function fails gracefully and provides meaningful error information when attempting to delete a non-existent product.

Scenario 3: Error During Deletion of a Product

Details:
  Description: This test is meant to check how the function "DeleteByNameProduct" handles the scenario where an error occurs during the deletion of a product. This can occur due to various reasons such as database connectivity issues or data corruption.
Execution:
  Arrange: Mock the repository's "FindByNameProduct" method to return a valid AllProduct object and the "Delete" method to return an error.
  Act: Invoke "DeleteByNameProduct" with the name, price, and email of an existing product.
  Assert: Use Go testing facilities to verify that an error is returned.
Validation:
  The assertion checks that the function correctly handles errors that occur during the deletion of a product. This is important to ensure that the function fails gracefully and provides meaningful error information when an error occurs during deletion.
*/

// ********RoostGPT********
package allproducts

import (
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

// MockRepository is a custom mock type that we'll use to override the behaviour of the Repository interface methods for testing purposes
type MockRepository struct {
	mock.Mock
}

// The mock repository methods
func (m *MockRepository) FindByNameProduct(name_product string, price string, email_user string) (AllProduct, error) {
	args := m.Called(name_product, price, email_user)
	return args.Get(0).(AllProduct), args.Error(1)
}

func (m *MockRepository) Delete(allProduct AllProduct) (AllProduct, error) {
	args := m.Called(allProduct)
	return args.Get(0).(AllProduct), args.Error(1)
}

// TestDeleteByNameProduct is the unit test for the DeleteByNameProduct function
func TestDeleteByNameProduct(t *testing.T) {
	// Arrange
	mockRepo := new(MockRepository)
	testService := &service{
		repository: mockRepo,
	}

	testProduct := AllProduct{
		Id:          1,
		Name_product: "Test Product",
		Image_url:   "test_image_url",
		Description: "test_description",
		Price:       100,
		Name_user:   "test_user",
		Email_user:  "test_user@test.com",
		Category:    "test_category",
	}

	// Scenario 1: Successful Deletion of a Product by Name
	mockRepo.On("FindByNameProduct", testProduct.Name_product, testProduct.Price, testProduct.Email_user).Return(testProduct, nil)
	mockRepo.On("Delete", testProduct).Return(testProduct, nil)
	
	// Act
	product, err := testService.DeleteByNameProduct(testProduct.Name_product, testProduct.Price, testProduct.Email_user)
	
	// Assert
	assert.NoError(t, err)
	assert.Equal(t, testProduct, product)
	mockRepo.AssertExpectations(t)

	// Scenario 2: Deletion of a Non-Existent Product
	mockRepo.On("FindByNameProduct", testProduct.Name_product, testProduct.Price, testProduct.Email_user).Return(AllProduct{}, errors.New("Product not found"))
	
	// Act
	product, err = testService.DeleteByNameProduct(testProduct.Name_product, testProduct.Price, testProduct.Email_user)
	
	// Assert
	assert.Error(t, err)
	assert.Equal(t, AllProduct{}, product)
	mockRepo.AssertExpectations(t)

	// Scenario 3: Error During Deletion of a Product
	mockRepo.On("FindByNameProduct", testProduct.Name_product, testProduct.Price, testProduct.Email_user).Return(testProduct, nil)
	mockRepo.On("Delete", testProduct).Return(AllProduct{}, errors.New("Error deleting product"))
	
	// Act
	product, err = testService.DeleteByNameProduct(testProduct.Name_product, testProduct.Price, testProduct.Email_user)
	
	// Assert
	assert.Error(t, err)
	assert.Equal(t, AllProduct{}, product)
	mockRepo.AssertExpectations(t)
}
