// ********RoostGPT********
/*
Test generated by RoostGPT for test java-restassured using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=FindAll_bcdfa00c4b
ROOST_METHOD_SIG_HASH=FindAll_5106f53d96

Scenario 1: FindAll function returns all products successfully

Details:
  Description: This test is meant to check the normal functionality of the FindAll function. It verifies whether the function can retrieve all products from the repository without any errors.
Execution:
  Arrange: Mock the repository's FindAll function to return a slice of AllProduct and nil error.
  Act: Invoke the FindAll function of the service.
  Assert: Verify that the function returns the expected slice of AllProduct and no error.
Validation:
  The assertion checks if the returned slice of AllProduct is the same as the one returned by the mocked repository and if the error is nil. This test is important to ensure that the FindAll function can retrieve all products from the repository as expected.

Scenario 2: FindAll function returns an error when the repository encounters an issue

Details:
  Description: This test is meant to check the error handling of the FindAll function. It verifies whether the function returns an error when the repository encounters an issue.
Execution:
  Arrange: Mock the repository's FindAll function to return nil and an error.
  Act: Invoke the FindAll function of the service.
  Assert: Verify that the function returns nil and the expected error.
Validation:
  The assertion checks if the returned slice of AllProduct is nil and if the error is the same as the one returned by the mocked repository. This test is important to ensure that the FindAll function can handle errors properly when the repository encounters an issue.

Scenario 3: FindAll function returns an empty slice when there are no products in the repository

Details:
  Description: This test is meant to check the FindAll function's behavior when there are no products in the repository. It verifies whether the function can return an empty slice without any error.
Execution:
  Arrange: Mock the repository's FindAll function to return an empty slice of AllProduct and nil error.
  Act: Invoke the FindAll function of the service.
  Assert: Verify that the function returns an empty slice and no error.
Validation:
  The assertion checks if the returned slice of AllProduct is empty and if the error is nil. This test is important to ensure that the FindAll function can handle the scenario where there are no products in the repository properly.
*/

// ********RoostGPT********
package allproducts

import (
	"testing"
	"errors"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

type MockRepository struct {
	mock.Mock
}

func (m *MockRepository) FindAll() ([]AllProduct, error) {
	args := m.Called()
	return args.Get(0).([]AllProduct), args.Error(1)
}

func TestFindAll(t *testing.T) {
	mockRepo := new(MockRepository)
	testService := &service{
		repository: mockRepo,
	}

	testCases := []struct {
		name          string
		mockRepoResponse []AllProduct
		mockRepoError error
		expectedError error
	}{
		{
			name: "Scenario 1: FindAll function returns all products successfully",
			mockRepoResponse: []AllProduct{
				{Id: 1, Name_product: "Product 1", Image_url: "url1", Description: "desc1", Price: 100, Name_user: "user1", Email_user: "user1@gmail.com", Category: "category1"},
				{Id: 2, Name_product: "Product 2", Image_url: "url2", Description: "desc2", Price: 200, Name_user: "user2", Email_user: "user2@gmail.com", Category: "category2"},
			},
			mockRepoError: nil,
			expectedError: nil,
		},
		{
			name: "Scenario 2: FindAll function returns an error when the repository encounters an issue",
			mockRepoResponse: nil,
			mockRepoError: errors.New("error occurred"),
			expectedError: errors.New("error occurred"),
		},
		{
			name: "Scenario 3: FindAll function returns an empty slice when there are no products in the repository",
			mockRepoResponse: []AllProduct{},
			mockRepoError: nil,
			expectedError: nil,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			mockRepo.On("FindAll").Return(tc.mockRepoResponse, tc.mockRepoError)
			products, err := testService.FindAll()

			if tc.expectedError == nil {
				assert.NoError(t, err)
				assert.Equal(t, tc.mockRepoResponse, products)
			} else {
				assert.Error(t, err)
				assert.Equal(t, tc.expectedError, err)
				assert.Nil(t, products)
			}
		})
	}
}
