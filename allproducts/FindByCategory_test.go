// ********RoostGPT********
/*
Test generated by RoostGPT for test java-restassured using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=FindByCategory_c8e5e5f494
ROOST_METHOD_SIG_HASH=FindByCategory_81e36c4885

Scenario 1: Successful retrieval of products by category

Details:
    Description: This test is meant to check the successful retrieval of products by category from the repository. The service should return the same set of products that the repository returns without any modifications.
Execution:
    Arrange: Mock the repository to return a specific set of products when FindByCategory is called with a certain category.
    Act: Invoke FindByCategory on the service with the same category.
    Assert: Assert that the returned products from the service are the same as the products returned by the mock repository.
Validation:
    The assertion validates that the service correctly forwards the results from the repository. This test is important to ensure that the service layer does not modify the data from the repository, and correctly handles successful cases.

Scenario 2: Repository returns an error when finding products by category

Details:
    Description: This test is meant to check that the service correctly forwards any errors that occur in the repository when finding products by category.
Execution:
    Arrange: Mock the repository to return an error when FindByCategory is called.
    Act: Invoke FindByCategory on the service with any category.
    Assert: Assert that the service returns the same error that was returned by the mock repository.
Validation:
    The assertion validates that the service correctly forwards the error from the repository. This test is important to ensure that the service layer does not suppress or modify errors from the repository, allowing them to be correctly handled at a higher level.

Scenario 3: Repository returns no products for a category

Details:
    Description: This test is meant to check that the service handles the case where the repository returns no products for a certain category.
Execution:
    Arrange: Mock the repository to return no products when FindByCategory is called with a certain category.
    Act: Invoke FindByCategory on the service with the same category.
    Assert: Assert that the service returns an empty list of products.
Validation:
    The assertion validates that the service correctly handles the case where the repository returns no products. This test is important to ensure that the service layer can handle cases where no data is available for a certain category, and returns an appropriate response.
*/

// ********RoostGPT********
package allproducts

import (
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

type MockRepository struct {
	mock.Mock
}

func (mock *MockRepository) FindByCategory(category string) ([]AllProduct, error) {
	args := mock.Called(category)
	return args.Get(0).([]AllProduct), args.Error(1)
}

func TestFindByCategory(t *testing.T) {
	mockRepository := new(MockRepository)
	service := &service{
		repository: mockRepository,
	}

	testCases := []struct {
		name           string
		category       string
		mockProducts   []AllProduct
		mockError      error
		expectedResult []AllProduct
		expectedError  error
	}{
		{
			name:     "Successful retrieval of products by category",
			category: "Books",
			mockProducts: []AllProduct{
				{Id: 1, Category: "Books"},
				{Id: 2, Category: "Books"},
			},
			expectedResult: []AllProduct{
				{Id: 1, Category: "Books"},
				{Id: 2, Category: "Books"},
			},
		},
		{
			name:          "Repository returns an error when finding products by category",
			category:      "Electronics",
			mockError:     errors.New("database error"),
			expectedError: errors.New("database error"),
		},
		{
			name:           "Repository returns no products for a category",
			category:       "Sports",
			mockProducts:   []AllProduct{},
			expectedResult: []AllProduct{},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			mockRepository.On("FindByCategory", tc.category).Return(tc.mockProducts, tc.mockError)

			result, err := service.FindByCategory(tc.category)

			mockRepository.AssertExpectations(t)
			assert.Equal(t, tc.expectedResult, result)
			assert.Equal(t, tc.expectedError, err)
		})
	}
}
