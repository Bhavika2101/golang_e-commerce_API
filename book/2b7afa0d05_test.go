// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview


package book_test

import (
	"errors"
	"testing"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	"github.com/stretchr/testify/assert"
	"golang_e-commerce_API/book"
)

// setup creates a new in-memory database for testing, returns a cleanup function to close the database.
func setup() (*gorm.DB, func()) {
	db, err := gorm.Open(sqlite.Open(":memory:"), &gorm.Config{})
	if err != nil {
		panic("failed to connect database")
	}
	db.AutoMigrate(&book.Book{})
	return db, func() {
		db, _ := db.DB()
		db.Close()
	}
}

func TestDelete_Success(t *testing.T) {
	db, cleanup := setup()
	defer cleanup()
	repo := book.NewRepository(db)

	// Create a book to test delete
	testBook := book.Book{Title: "Test Book", Author: "Author", Description: "Desc"}
	result, _ := repo.Create(testBook)

	// Delete book
	_, err := repo.Delete(result)
	assert.NoError(t, err)

	// Verify the book was deleted
	var books []book.Book
	db.Find(&books)
	assert.Equal(t, 0, len(books))
}

func TestDelete_Failure(t *testing.T) {
	db, cleanup := setup()
	defer cleanup()
	repo := book.NewRepository(db)

	testBook := book.Book{Title: "Test Book", Author: "Author", Description: "Desc"}
	result, _ := repo.Create(testBook)

	// Delete a non-existing book with non-existing ID to simulate failure
	nonExistingBook := book.Book{Model: gorm.Model{ID: 999}}
	_, err := repo.Delete(nonExistingBook)
	assert.Error(t, err)
}

