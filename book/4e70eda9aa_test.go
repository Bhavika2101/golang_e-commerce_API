// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview

package book

import (
    "errors"
    "testing"

    "gorm.io/gorm"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/mock"
)

// MockDB is a mock of the gorm.DB structure
type MockDB struct {
    mock.Mock
}

// Find is a mock implementation of gorm.DB's Find function
func (m *MockDB) Find(dest interface{}, conds ...interface{}) *gorm.DB { 
    args := m.Called(dest, conds)
    if args.Get(0) != nil {
        *dest.(*[]Book) = args.Get(0).([]Book)
    }
    return &gorm.DB{Error: args.Error(1)}
}

func TestFindAll_Positive(t *testing.T) {
    // Arrange
    mockDB := new(MockDB)
    expectedBooks := []Book{{Title: "Test Book 1"}, {Title: "Test Book 2"}}
    mockDB.On("Find", &[]Book{}, []interface{}{}).Return(expectedBooks, nil)
    repo := NewRepository(mockDB)

    // Act
    books, err := repo.FindAll()

    // Assert
    assert.NoError(t, err)
    assert.Equal(t, expectedBooks, books)
}

func TestFindAll_Negative(t *testing.T) {
    // Arrange
    mockDB := new(MockDB)
    expectedError := errors.New("database error")
    var expectedBooks []Book // empty slice
    mockDB.On("Find", &[]Book{}, []interface{}{}).Return(expectedBooks, expectedError)
    repo := NewRepository(mockDB)

    // Act
    books, err := repo.FindAll()

    // Assert
    assert.Error(t, err)
    assert.Equal(t, expectedError, err)
    assert.Empty(t, books)
}

