// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview


package book_test

import (
	"errors"
	"testing"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"{insert_main_package_here}/book"
)

type MockDB struct {
	mock.Mock
	*gorm.DB
}

func (m *MockDB) Create(value interface{}) *gorm.DB {
	args := m.Called(value)
	return args.Get(0).(*gorm.DB)
}

func TestCreateBookSuccess(t *testing.T) {
	db, _ := gorm.Open(sqlite.Open("file::memory:?cache=shared"), &gorm.Config{})
	mockDB := new(MockDB)
	mockDB.DB = db
	repo := book.NewRepository(mockDB)

	bookInput := book.Book{
		ID:       0,
		Title:    "Test Book",
		Author:   "Test Author",
		Summary:  "Test Summary",
		Price:    100,
		Quantity: 10,
	}

	mockDB.On("Create", &bookInput).Return(db)

	createdBook, err := repo.Create(bookInput)

	assert.Nil(t, err)
	assert.Equal(t, bookInput.Title, createdBook.Title)
	assert.Equal(t, bookInput.Author, createdBook.Author)
	assert.Equal(t, bookInput.Summary, createdBook.Summary)
	assert.Equal(t, bookInput.Price, createdBook.Price)
	assert.Equal(t, bookInput.Quantity, createdBook.Quantity)
	mockDB.AssertExpectations(t)
}

func TestCreateBookFailure(t *testing.T) {
	db, _ := gorm.Open(sqlite.Open("file::memory:?cache=shared"), &gorm.Config{})
	mockDB := new(MockDB)
	mockDB.DB = db
	repo := book.NewRepository(mockDB)

	bookInput := book.Book{
		ID:       0,
		Title:    "Test Book",
		Author:   "Test Author",
		Summary:  "Test Summary",
		Price:    100,
		Quantity: 10,
	}

	expectedError := errors.New("some database error")
	mockDB.On("Create", &bookInput).Return(func(value interface{}) *gorm.DB {
		return db
	})
	mockDB.DB = mockDB.DB.AddError(expectedError)

	_, err := repo.Create(bookInput)

	assert.NotNil(t, err)
	assert.Equal(t, expectedError, err)
	mockDB.AssertExpectations(t)
}

