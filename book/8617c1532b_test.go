// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview

package book_test

import (
	"errors"
	"golang_e-commerce_API/book"
	"gorm.io/gorm"
	"testing"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm/logger"
)

// create a mocked DB for testing purposes
func setupDatabase(t *testing.T) *gorm.DB {
	db, err := gorm.Open(sqlite.Open(":memory:"), &gorm.Config{
		Logger: logger.Default.LogMode(logger.Silent),
	})
	if err != nil {
		t.Fatalf("Failed to connect to database: %v", err)
	}

	// Migrate the schema
	if err := db.AutoMigrate(&book.Book{}); err != nil {
		t.Fatalf("Failed to migrate database: %v", err)
	}

	return db
}

func TestFindByID_Positive(t *testing.T) {
	db := setupDatabase(t)
	repo := book.NewRepository(db)

	// Create a book to find later
	newBook := book.Book{ID: 1, Title: "Test Book", Author: "Test Author", Price: 9.99}
	result, err := repo.Create(newBook)
	if err != nil || result.ID != newBook.ID {
		t.Fatalf("Could not create test book: %v", err)
	}

	// Positive case where the book should be found
	foundBook, err := repo.FindByID(newBook.ID)
	if err != nil {
		t.Fatalf("Could not find book by ID: %v", err)
	}

	if foundBook.ID != newBook.ID {
		t.Errorf("Expected book ID %v, got %v", newBook.ID, foundBook.ID)
	}
}

func TestFindByID_Negative(t *testing.T) {
	db := setupDatabase(t)
	repo := book.NewRepository(db)

	// Negative case where the book should not be found
	_, err := repo.FindByID(999) // Assuming 999 is an ID that does not exist
	if !errors.Is(err, gorm.ErrRecordNotFound) {
		t.Errorf("Expected error '%v', got '%v'", gorm.ErrRecordNotFound, err)
	}
}

