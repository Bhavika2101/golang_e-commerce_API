// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview

package book

import (
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"gorm.io/gorm"
)

// mockGormDB is a mocked object implementing the interface that repository expects
type mockGormDB struct {
	mock.Mock
}

// Find function mock
func (m *mockGormDB) Find(dest interface{}, conds ...interface{}) *gorm.DB {
	args := m.Called(dest, conds)
	return args.Get(0).(*gorm.DB)
}

// Positive TestCase - FindByID where a book is found successfully
func TestRepository_FindByID_Positive(t *testing.T) {
	db := new(mockGormDB)
	repo := NewRepository(db)

	book := Book{
		ID:    1,
		Title: "Sample Book",
	}
	db.On("Find", &Book{}, 1).Return(&gorm.DB{Error: nil}).Once()

	result, err := repo.FindByID(1)

	assert.NoError(t, err)
	assert.Equal(t, book, result)
	db.AssertExpectations(t)
}

// Negative TestCase - FindByID where no book is found
func TestRepository_FindByID_Negative(t *testing.T) {
	db := new(mockGormDB)
	repo := NewRepository(db)

	db.On("Find", &Book{}, 999).Return(&gorm.DB{Error: gorm.ErrRecordNotFound}).Once()

	_, err := repo.FindByID(999)

	assert.Error(t, err)
	assert.Equal(t, gorm.ErrRecordNotFound, err)
	db.AssertExpectations(t)
}

