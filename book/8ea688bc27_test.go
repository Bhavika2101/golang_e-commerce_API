// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview


package book

import (
	"testing"
	"gorm.io/gorm"
	"github.com/DATA-DOG/go-sqlmock"
)

func TestNewRepository(t *testing.T) {
	db, mock, err := sqlmock.New()
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer db.Close()

	gormDB, err := gorm.Open(postgres.New(postgres.Config{
		Conn: db,
	}), &gorm.Config{})
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a gorm database connection", err)
	}

	t.Run("positive case", func(t *testing.T) {
		repo := NewRepository(gormDB)
		if repo == nil {
			t.Errorf("NewRepository was incorrect, got nil repository")
		}
	})

	t.Run("negative case with nil db", func(t *testing.T) {
		repo := NewRepository(nil)
		if repo != nil {
			t.Errorf("NewRepository should return nil when provided db is nil")
		}
	})

	// This is a dummy test case as NewRepository doesn't actually produce an error case with the current definition
	t.Run("negative case with mock db error", func(t *testing.T) {
		mock.ExpectBegin()
		mock.ExpectQuery("SELECT").WillReturnError(gorm.ErrRecordNotFound)

		repo := NewRepository(gormDB)
		if repo == nil {
			t.Errorf("NewRepository was incorrect, got nil repository even though db has error handling capability")
		}
	})
}

