// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview

package hoodie

import (
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"gorm.io/gorm"
)

// Define a mock for the repository struct
type MockRepository struct {
	mock.Mock
	db *gorm.DB
}

// Mock the Update method
func (mock *MockRepository) Update(hoodie Hoodie) (Hoodie, error) {
	args := mock.Called(hoodie)
	return args.Get(0).(Hoodie), args.Error(1)
}

// TestUpdateHoodie_Success tests the positive case where the hoodie is updated successfully
func TestUpdateHoodie_Success(t *testing.T) {
	db := new(MockRepository)
	testHoodie := Hoodie{ID: 1, Name: "Sample Hoodie", Size: "M", Color: "Black"}
	updatedHoodie := Hoodie{ID: 1, Name: "Updated Hoodie", Size: "M", Color: "Black"}

	db.On("Update", mock.Anything).Return(updatedHoodie, nil)

	repo := NewRepository(db.db)
	resultHoodie, err := repo.Update(testHoodie)

	db.AssertExpectations(t)
	assert.Nil(t, err)
	assert.Equal(t, updatedHoodie, resultHoodie)
}

// TestUpdateHoodie_Failure tests the negative case where the hoodie update fails
func TestUpdateHoodie_Failure(t *testing.T) {
	db := new(MockRepository)
	testHoodie := Hoodie{ID: 1, Name: "Sample Hoodie", Size: "M", Color: "Black"}
	errorMsg := "update failed"

	db.On("Update", mock.Anything).Return(Hoodie{}, errors.New(errorMsg))

	repo := NewRepository(db.db)
	resultHoodie, err := repo.Update(testHoodie)

	db.AssertExpectations(t)
	assert.NotNil(t, err)
	assert.EqualError(t, err, errorMsg)
	assert.Equal(t, Hoodie{}, resultHoodie)
}

