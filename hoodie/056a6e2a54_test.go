// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview


package hoodie_test

import (
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"gorm.io/gorm"

	"your_project/hoodie" // Replace with your actual project import path
)

// mockRepository is a mock type for the Repository type defined in repository.go
type mockRepository struct {
	mock.Mock
}

// Update is the mock method that simulates the Update method of the Repository interface
func (_m *mockRepository) Update(h hoodie.Hoodie) (hoodie.Hoodie, error) {
	ret := _m.Called(h)

	var r0 hoodie.Hoodie
	if rf, ok := ret.Get(0).(func(hoodie.Hoodie) hoodie.Hoodie); ok {
		r0 = rf(h)
	} else {
		r0 = ret.Get(0).(hoodie.Hoodie)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(hoodie.Hoodie) error); ok {
		r1 = rf(h)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestUpdateHoodie_Success tests the positive scenario of updating a hoodie
func TestUpdateHoodie_Success(t *testing.T) {
	db := new(mockRepository)
	h := hoodie.Hoodie{
		ID:    1,
		Name:  "Cool Hoodie",
		Price: 49.99,
	}

	db.On("Update", mock.Anything).Return(h, nil)

	s := hoodie.NewService(db)
	result, err := s.UpdateHoodie(h)
	assert.Nil(t, err)
	assert.Equal(t, h, result)
}

// TestUpdateHoodie_Failure tests the negative scenario of failing to update a hoodie
func TestUpdateHoodie_Failure(t *testing.T) {
	db := new(mockRepository)
	h := hoodie.Hoodie{
		ID:    1,
		Name:  "Cool Hoodie",
		Price: 49.99,
	}
	expectedError := gorm.ErrRecordNotFound

	db.On("Update", mock.Anything).Return(hoodie.Hoodie{}, expectedError)

	s := hoodie.NewService(db)
	result, err := s.UpdateHoodie(h)
	assert.NotNil(t, err)
	assert.Equal(t, expectedError, err)
	assert.Equal(t, hoodie.Hoodie{}, result)
}

