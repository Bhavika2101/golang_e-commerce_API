// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview

package hoodie_test

import (
	"errors"
	"reflect"
	"testing"

	"golang_e-commerce_API/hoodie"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

func setupMockDB(t *testing.T) *gorm.DB {
	t.Helper()
	db, err := gorm.Open(sqlite.Open(":memory:"), &gorm.Config{})
	if err != nil {
		t.Fatalf("failed to connect to database: %v", err)
	}

	// AutoMigrate model here if needed
	// db.AutoMigrate(&hoodie.Hoodie{})

	return db
}

func TestRepository_FindAll_Positive(t *testing.T) {
	db := setupMockDB(t)
	repo := hoodie.NewRepository(db)

	mockData := []hoodie.Hoodie{
		{ID: 1, Name: "Classic Black", Size: "M", Price: 49.99},
		{ID: 2, Name: "Vintage White", Size: "L", Price: 59.99},
	}
	for _, hd := range mockData {
		if _, err := repo.Create(hd); err != nil {
			t.Fatalf("failed to insert mock data: %v", err)
		}
	}

	hoodies, err := repo.FindAll()
	if err != nil {
		t.Fatalf("error while fetching all hoodies: %v", err)
	}

	if !reflect.DeepEqual(hoodies, mockData) {
		t.Errorf("expected %+v, got %+v", mockData, hoodies)
	}
}

func TestRepository_FindAll_Negative(t *testing.T) {
	db := setupMockDB(t)
	repo := hoodie.NewRepository(db)

	_, err := repo.FindAll()
	if err == nil {
		t.Error("expected error for empty table, got nil")
	} else {
		// Check for specific error if applicable, e.g., record not found
		if !errors.Is(err, gorm.ErrRecordNotFound) {
			t.Errorf("expected ErrRecordNotFound, got %v", err)
		}
	}
}

