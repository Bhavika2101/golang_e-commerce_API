// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview

package hoodie_test

import (
	"errors"
	"golang_e-commerce_API/hoodie"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestCreate_Success(t *testing.T) {
	// Initialize the in-memory database
	db, err := gorm.Open(sqlite.Open(":memory:"), &gorm.Config{})
	if err != nil {
		t.Fatalf("Failed to connect to the database: %v", err)
	}

	// Migration to create the hoodie table in the in-memory database
	err = db.AutoMigrate(&hoodie.Hoodie{})
	if err != nil {
		t.Fatalf("Failed to migrate: %v", err)
	}

	// Create a hoodie repository
	repo := hoodie.NewRepository(db)

	// Define a hoodie example
	exampleHoodie := hoodie.Hoodie{
		ID:          1,
		Name:        "Test Hoodie",
		Size:        "M",
		Color:       "Red",
		Stock:       10,
		Price:       49.99,
	}

	// Try to create the hoodie - Positive case
	createdHoodie, err := repo.Create(exampleHoodie)
	if err != nil {
		t.Errorf("Failed to create hoodie: %v", err)
	}

	// Assertions
	assert.NoError(t, err)
	assert.NotEqual(t, 0, createdHoodie.ID)
	assert.Equal(t, exampleHoodie.Name, createdHoodie.Name)
	assert.Equal(t, exampleHoodie.Size, createdHoodie.Size)
	assert.Equal(t, exampleHoodie.Color, createdHoodie.Color)
	assert.Equal(t, exampleHoodie.Stock, createdHoodie.Stock)
	assert.Equal(t, exampleHoodie.Price, createdHoodie.Price)
}

func TestCreate_Failure(t *testing.T) {
	// Initialize the in-memory database
	db, err := gorm.Open(sqlite.Open(":memory:"), &gorm.Config{})
	if err != nil {
		t.Fatalf("Failed to connect to the database: %v", err)
	}

	// Mock the database create call to simulate a failure
	db.CreateFunc = func(value interface{}) *gorm.DB {
		return &gorm.DB{Error: errors.New("create failed")}
	}

	// Create a hoodie repository with the mock database
	repo := hoodie.NewRepository(db)

	// Define a hoodie example
	exampleHoodie := hoodie.Hoodie{
		ID:          1,
		Name:        "Test Hoodie",
		Size:        "M",
		Color:       "Red",
		Stock:       10,
		Price:       49.99,
	}

	// Try to create the hoodie - Negative case
	_, err = repo.Create(exampleHoodie)
	if err == nil {
		t.Errorf("Expected an error, got none")
	}

	// Assertions
	assert.Error(t, err)
	assert.Equal(t, "create failed", err.Error())
}

