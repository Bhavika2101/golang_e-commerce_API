// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview

package hoodie_test

import (
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"gorm.io/gorm"

	// Assuming the package name is hoodie and it has a hoodie struct type
	"hoodie"
)

// Mock for Gorm DB
type GormDBMock struct {
	mock.Mock
}

func (g *GormDBMock) Find(dest interface{}, conds ...interface{}) *gorm.DB {
	args := g.Called(dest, conds)
	if args.Get(1) != nil {
		return &gorm.DB{Error: args.Error(1)}
	}
	return &gorm.DB{Error: nil} // or some other proper way of simulating *gorm.DB without an error
}

func TestFindByID(t *testing.T) {
	gormDBMock := new(GormDBMock)

	repo := hoodie.NewRepository(gormDBMock)

	t.Run("positive case", func(t *testing.T) {
		gormDBMock.On("Find", mock.AnythingOfType("*hoodie.Hoodie"), "id = ?", 1).Return(nil, nil)

		_, err := repo.FindByID(1)
		assert.NoError(t, err)
	})

	t.Run("negative case", func(t *testing.T) {
		gormDBMock.On("Find", mock.AnythingOfType("*hoodie.Hoodie"), "id = ?", 2).Return(nil, errors.New("not found"))

		_, err := repo.FindByID(2)
		assert.Error(t, err)
		assert.Equal(t, "not found", err.Error())
	})
}

