// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview


package hoodie_test

import (
	"errors"
	"hoodie"
	"testing"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

type mockDB struct {
	db *gorm.DB
}

func (mock *mockDB) Find(out interface{}, where ...interface{}) *gorm.DB {
	if id, ok := where[0].(int); ok && id == 999 {
		// Simulate record not found with ID 999
		return mock.db
	}
	*(*hoodie.Hoodie)(out) = hoodie.Hoodie{
		Model: gorm.Model{
			ID: 1,
		},
		Name: "Test Hoodie",
		Size: "M",
	}
	// Return the mock db to allow for chaining
	return mock.db
}

func setupMockDB() *hoodie.Repository {
	db, _ := gorm.Open(sqlite.Open("test.db"), &gorm.Config{})
	hoodieRepo := hoodie.NewRepository(db)
	return hoodieRepo
}

func TestFindByID_Positive(t *testing.T) {
	repo := setupMockDB()
	repo.(*hoodie.repository).db = &mockDB{db: repo.(*hoodie.repository).db}
	
	expectedHoodie := hoodie.Hoodie{Model: gorm.Model{ID: 1}, Name: "Test Hoodie", Size: "M"}
	testID := 1
	hoodie, err := repo.FindByID(testID)
	if err != nil {
		t.Fatalf("Expected no error, got %s", err)
	}
	if hoodie.ID != expectedHoodie.ID {
		t.Errorf("Expected hoodie ID %v, got %v", expectedHoodie.ID, hoodie.ID)
	}
	if hoodie.Name != expectedHoodie.Name {
		t.Errorf("Expected hoodie Name %s, got %s", expectedHoodie.Name, hoodie.Name)
	}
	if hoodie.Size != expectedHoodie.Size {
		t.Errorf("Expected hoodie Size %s, got %s", expectedHoodie.Size, hoodie.Size)
	}
}

func TestFindByID_Negative(t *testing.T) {
	repo := setupMockDB()
	repo.(*hoodie.repository).db = &mockDB{db: repo.(*hoodie.repository).db}
	
	testID := 999 // ID that does not exist
	_, err := repo.FindByID(testID)
	if !errors.Is(err, gorm.ErrRecordNotFound) {
		t.Fatalf("Expected a record not found error, got %s", err)
	}
}

