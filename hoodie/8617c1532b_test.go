// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview

package hoodie

import (
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"gorm.io/gorm"
)

// Mocking the GORM DB and setting up expected calls for our test cases
type MockDB struct {
	mock.Mock
}

func (m *MockDB) Find(dest interface{}, conds ...interface{}) *gorm.DB {
	args := m.Called(dest, conds)
	return args.Get(0).(*gorm.DB)
}

func (m *MockDB) Create(value interface{}) *gorm.DB {
	args := m.Called(value)
	return args.Get(0).(*gorm.DB)
}

// A dummy hoodie struct to simulate real hoodie entities
type Hoodie struct {
	ID    int
	Size  string
	Color string
	Price float64
}

// Positive test case: FindByID should return a hoodie when the ID exists
func TestFindByID_Positive(t *testing.T) {
	db := new(MockDB)
	repo := NewRepository(db)

	hoodieID := 1
	expectedHoodie := Hoodie{ID: hoodieID, Size: "M", Color: "Red", Price: 49.99}

	db.On("Find", &Hoodie{}, hoodieID).Return(&gorm.DB{Error: nil}).Once()
	db.Mock.On("Error").Return(nil)

	result, err := repo.FindByID(hoodieID)

	assert.Nil(t, err)
	assert.Equal(t, expectedHoodie, result)

	db.AssertExpectations(t)
}

// Negative test case: FindByID should return an error when the ID does not exist
func TestFindByID_Negative(t *testing.T) {
	db := new(MockDB)
	repo := NewRepository(db)

	hoodieID := 99
	db.On("Find", &Hoodie{}, hoodieID).Return(&gorm.DB{Error: gorm.ErrRecordNotFound}).Once()
	db.Mock.On("Error").Return(gorm.ErrRecordNotFound)

	result, err := repo.FindByID(hoodieID)

	assert.NotNil(t, err)
	assert.Equal(t, err, gorm.ErrRecordNotFound)
	assert.Equal(t, Hoodie{}, result)

	db.AssertExpectations(t)
}

