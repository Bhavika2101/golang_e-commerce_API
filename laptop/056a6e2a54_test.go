// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview

package laptop_test

import (
	"errors"
	"golang_e-commerce_API/laptop"
	"gorm.io/gorm"
	"testing"

	"github.com/DATA-DOG/go-sqlmock"
	"github.com/stretchr/testify/assert"
)

func Test_repository_Update_Positive(t *testing.T) {
	db, mock, err := sqlmock.New() // Mocking the database
	assert.NoError(t, err)
	defer db.Close()

	gormDB, err := gorm.Open(dialectorConfig)
	assert.NoError(t, err)

	repo := laptop.NewRepository(gormDB)

	laptopToUpdate := laptop.Laptop{ID: 1, Name: "Test Laptop", Price: 999.99}
	mock.ExpectBegin()
	mock.ExpectSave(&laptopToUpdate).WillReturnResult(sqlmock.NewResult(1, 1))
	mock.ExpectCommit()

	updatedLaptop, err := repo.Update(laptopToUpdate)
	assert.NoError(t, err)
	assert.NotNil(t, updatedLaptop)
	assert.Equal(t, laptopToUpdate.ID, updatedLaptop.ID)
}

func Test_repository_Update_Negative(t *testing.T) {
	db, mock, err := sqlmock.New() // Mocking the database
	assert.NoError(t, err)
	defer db.Close()

	gormDB, err := gorm.Open(dialectorConfig)
	assert.NoError(t, err)
	
	repo := laptop.NewRepository(gormDB)

	laptopToUpdate := laptop.Laptop{ID: 1, Name: "Test Laptop", Price: 999.99}
	mock.ExpectBegin()
	mock.ExpectSave(&laptopToUpdate).WillReturnError(errors.New("update failed"))
	mock.ExpectRollback()

	updatedLaptop, err := repo.Update(laptopToUpdate)
	assert.Error(t, err)
	assert.EqualError(t, err, "update failed")
	assert.Equal(t, laptop.Laptop{}, updatedLaptop)
}

