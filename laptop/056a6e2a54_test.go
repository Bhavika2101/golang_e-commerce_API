// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview


package laptop_test

import (
	"errors"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	"laptop"
	"testing"
)

func setupDatabase() *gorm.DB {
	db, _ := gorm.Open(sqlite.Open("test.db"), &gorm.Config{})
	return db
}

func seedLaptop(db *gorm.DB) laptop.Laptop {
	// Create a laptop with ID 1
	laptop := laptop.Laptop{ID: 1, Brand: "Test Brand", Model: "Test Model", Price: 1000}
	db.Create(&laptop)
	return laptop
}

func TestUpdate_Positive(t *testing.T) {
	db := setupDatabase()
	defer db.Migrator().DropTable(&laptop.Laptop{})

	repo := laptop.NewRepository(db)
	testLaptop := seedLaptop(db)

	// Simulate update
	testLaptop.Brand = "Updated Brand"
	updatedLaptop, err := repo.Update(testLaptop)
	if err != nil {
		t.Errorf("Update failed: %s", err)
	}
	if updatedLaptop.Brand != "Updated Brand" {
		t.Errorf("Update did not persist, want %s, got %s", "Updated Brand", updatedLaptop.Brand)
	}
}

func TestUpdate_Negative(t *testing.T) {
	db := setupDatabase()
	defer db.Migrator().DropTable(&laptop.Laptop{})

	repo := laptop.NewRepository(db)
	testLaptop := seedLaptop(db)

	// Attempt to update a laptop that does not exist
	nonExistentLaptop := laptop.Laptop{ID: 999, Brand: "Nonexistent Brand", Model: "Nonexistent Model", Price: 500}
	_, err := repo.Update(nonExistentLaptop)
	if err == nil {
		t.Error("Update did not fail on non-existent laptop")
	}
}

