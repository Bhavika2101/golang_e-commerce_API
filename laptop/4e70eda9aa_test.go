// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview

package laptop_test

import (
	"errors"
	"laptop"
	"testing"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

func setupDatabase() (*gorm.DB, error) {
	db, err := gorm.Open(sqlite.Open("file::memory:?cache=shared"), &gorm.Config{})
	if err != nil {
		return nil, err
	}
	
	err = db.AutoMigrate(&laptop.Laptop{})
	if err != nil {
		return nil, err
	}
	
	return db, nil
}

func TestFindAll_Positive(t *testing.T) {
	db, err := setupDatabase()
	if err != nil {
		t.Fatalf("setupDatabase() error = %v", err)
	}

	repo := laptop.NewRepository(db)
	expectedLaptops := []laptop.Laptop{
        {ID: 1, Brand: "Dell", Model: "XPS 13"},
        {ID: 2, Brand: "Apple", Model: "MacBook Pro"},
    }
	// Seed the database with test data
	for _, l := range expectedLaptops {
		db.Create(&l)
	}

	laptops, err := repo.FindAll()
	if err != nil {
		t.Errorf("FindAll() error = %v", err)
		return
	}

	if len(laptops) != len(expectedLaptops) {
		t.Errorf("FindAll() got = %v, want %v", laptops, expectedLaptops)
	}
}

func TestFindAll_Negative(t *testing.T) {
	db, _ := gorm.Open(sqlite.Open("file::memory:?cache=shared"), &gorm.Config{}) // Assume no error
	repo := laptop.NewRepository(db)
	db.Close() // Close the database to simulate an error

	_, err := repo.FindAll()
	if err == nil {
		t.Error("FindAll() error = nil, want error")
	}
}

