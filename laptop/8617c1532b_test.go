// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview

package laptop_test

import (
	"errors"
	"golang_ecommerce/laptop"
	"gorm.io/gorm"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

// Create a mock for the Gorm DB
type GormDBMock struct {
	mock.Mock
}

func (g *GormDBMock) Find(dest interface{}, conds ...interface{}) *gorm.DB {
	args := g.Called(dest, conds)
	return args.Get(0).(*gorm.DB)
}

// Test case for FindByID - Positive case
func TestRepository_FindByID_PositiveCase(t *testing.T) {
	dbMock := new(GormDBMock)
	repo := laptop.NewRepository(dbMock)
	testID := 1
	expectedLaptop := laptop.Laptop{ID: testID}

	dbMock.On("Find", &laptop.Laptop{}, "id = ?", testID).Return(&gorm.DB{Error: nil}).Once()
	laptopResult, err := repo.FindByID(testID)

	assert.Nil(t, err)
	assert.Equal(t, expectedLaptop, laptopResult)
	dbMock.AssertExpectations(t)
}

// Test case for FindByID - Negative case
func TestRepository_FindByID_NegativeCase(t *testing.T) {
	dbMock := new(GormDBMock)
	repo := laptop.NewRepository(dbMock)
	testID := 2

	dbMock.On("Find", &laptop.Laptop{}, "id = ?", testID).Return(&gorm.DB{Error: gorm.ErrRecordNotFound}).Once()
	_, err := repo.FindByID(testID)

	assert.NotNil(t, err)
	assert.True(t, errors.Is(err, gorm.ErrRecordNotFound))
	dbMock.AssertExpectations(t)
}

