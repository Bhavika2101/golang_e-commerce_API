// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview

package laptop

import (
	"testing"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	"github.com/stretchr/testify/assert" // using testify for assertions
)

func TestNewRepository(t *testing.T) {
	// Positive case: Should successfully create repository with a non-nil database connection.
	t.Run("creates new repository successfully", func(t *testing.T) {
		// Mock database connection using sqlite in-memory database.
		db, err := gorm.Open(sqlite.Open("file::memory:?cache=shared"), &gorm.Config{})
		if err != nil {
			t.Fatalf("Failed to connect to database: %v", err)
		}

		repo := NewRepository(db)
		assert.NotNil(t, repo, "Expected repository to be non-nil")
		assert.NotNil(t, repo.db, "Expected repository.db to be non-nil")
	})

	// Negative case: Since the function is very basic, there is no natural negative case for the constructor.
	// However, lets assume that if a nil db is passed, we want to ensure the constructor returns a nil.
	t.Run("returns nil with nil database connection", func(t *testing.T) {
		repo := NewRepository(nil)
		assert.Nil(t, repo, "Expected repository to be nil when given nil db")
	})
}

