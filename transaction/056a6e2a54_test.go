// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview

package transaction

import (
	"errors"
	"testing"

	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"
)

// Define a mockRepository that satisfies the Repository interface
type mockRepository struct {
	mock.Mock
}

func (m *mockRepository) FindAll() ([]Transaction, error) {
	args := m.Called()
	return args.Get(0).([]Transaction), args.Error(1)
}

func (m *mockRepository) FindByID(ID int) (Transaction, error) {
	args := m.Called(ID)
	return args.Get(0).(Transaction), args.Error(1)
}

func (m *mockRepository) Create(transaction Transaction) (Transaction, error) {
	args := m.Called(transaction)
	return args.Get(0).(Transaction), args.Error(1)
}

func (m *mockRepository) Update(ID int, transaction Transaction) (Transaction, error) {
	args := m.Called(ID, transaction)
	return args.Get(0).(Transaction), args.Error(1)
}

func (m *mockRepository) Delete(ID int) (Transaction, error) {
	args := m.Called(ID)
	return args.Get(0).(Transaction), args.Error(1)
}

// TestUpdate_Success tests the successful update of a transaction
func TestUpdate_Success(t *testing.T) {
	// Arrange
	mockRepo := new(mockRepository)
	testService := NewService(mockRepo)
	testID := 123
	testTransaction := Transaction{
		ID:          testID,
		Name_product: "Laptop",
		Price:        1000,
	}
	testRequest := TransactionRequest{
		Name_product: "Updated Laptop",
		Price:        toBigInt(1200), // Assume toBigInt is a utility function to convert int to BigInt
	}

	updatedTransaction := testTransaction
	updatedTransaction.Name_product = testRequest.Name_product
	updatedTransaction.Price = int(testRequest.Price.Int64())

	mockRepo.On("FindByID", testID).Return(testTransaction, nil)
	mockRepo.On("Update", testID, mock.AnythingOfType("Transaction")).Return(updatedTransaction, nil)

	// Act
	result, err := testService.Update(testID, testRequest)

	// Assert
	require.NoError(t, err)
	require.NotNil(t, result)
	require.Equal(t, updatedTransaction.Name_product, result.Name_product)
	require.Equal(t, updatedTransaction.Price, result.Price)

	mockRepo.AssertExpectations(t)
}

// TestUpdate_Failure tests the update of a transaction with an error
func TestUpdate_Failure(t *testing.T) {
	// Arrange
	mockRepo := new(mockRepository)
	testService := NewService(mockRepo)
	testID := 456
	testRequest := TransactionRequest{
		Name_product: "Failing Laptop",
		Price:        toBigInt(1300), // Assume toBigInt is a utility function to convert int to BigInt
	}

	mockRepo.On("FindByID", testID).Return(Transaction{}, errors.New("transaction not found"))
	mockRepo.On("Update", testID, mock.AnythingOfType("Transaction")).Return(Transaction{}, errors.New("update failed"))

	// Act
	result, err := testService.Update(testID, testRequest)

	// Assert
	require.Error(t, err)
	require.EqualError(t, err, "transaction not found")
	require.Empty(t, result)

	mockRepo.AssertExpectations(t)
}

