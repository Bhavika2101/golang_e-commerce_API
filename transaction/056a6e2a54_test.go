// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview

package transaction_test

import (
	"errors"
	"testing"
	"gorm.io/gorm"
	"gorm.io/driver/sqlite"
	"github.com/stretchr/testify/assert"
	"path/filepath"
	"golang_e-commerce_API/transaction"
)

func setupDatabase() *gorm.DB {
	db, err := gorm.Open(sqlite.Open(filepath.Join(os.TempDir(), "test.db")), &gorm.Config{})
	if err != nil {
		panic("failed to connect database")
	}

	// Migration to create tables for testing
	db.AutoMigrate(&transaction.Transaction{})

	return db
}

func TestUpdate_Success(t *testing.T) {
	db := setupDatabase()
	repo := transaction.NewRepository(db)

	// Seed the database with a transaction
	initialTransaction := transaction.Transaction{ID: 1, Status: "pending"}
	if err := db.Create(&initialTransaction).Error; err != nil {
		t.Fatalf("could not seed database: %v", err)
	}

	// Update the status of the transaction
	newTransaction := transaction.Transaction{ID: 1, Status: "completed"}
	result, err := repo.Update(newTransaction)

	assert.NoError(t, err)
	assert.Equal(t, newTransaction.Status, result.Status)
}

func TestUpdate_Failure(t *testing.T) {
	db := setupDatabase()
	repo := transaction.NewRepository(db)

	newTransaction := transaction.Transaction{ID: 99, Status: "completed"}
	_, err := repo.Update(newTransaction)

	assert.Error(t, err, "should return error when transaction does not exist")
}

