// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview


package transaction_test

import (
	"errors"
	"testing"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	"github.com/stretchr/testify/assert"
	. "path/to/transaction" // replace with the correct import path
)

// MockDBInit initializes a mock DB with an in-memory SQLite database for testing
func MockDBInit() *gorm.DB {
	db, _ := gorm.Open(sqlite.Open("file::memory:?cache=shared"), &gorm.Config{})
	return db
}

func TestFindAllPositive(t *testing.T) {
	db := MockDBInit()
	repo := NewRepository(db)

	expected := []Transaction{
		{ID: 1, Amount: 1000.00, EmailBuyer: "buyer1@example.com"},
		{ID: 2, Amount: 2000.00, EmailBuyer: "buyer2@example.com"},
	}

	db.Create(&expected)

	result, err := repo.FindAll()
	assert.NoError(t, err)
	assert.Equal(t, expected, result)
}

func TestFindAllNegative(t *testing.T) {
	db := MockDBInit()
	db.Migrator().DropTable(&Transaction{})
	repo := NewRepository(db)

	_, err := repo.FindAll()
	assert.Error(t, err)
	assert.True(t, errors.Is(err, gorm.ErrInvalidTransaction))
}

