// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview

package transaction_test

import (
	"errors"
	"golang_e-commerce_API/transaction"
	"testing"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

type MockDB struct {
	db *gorm.DB
}

func (m *MockDB) Find(dest interface{}, conds ...interface{}) *gorm.DB {
	if txns, ok := dest.(*[]transaction.Transaction); ok {
		*txns = []transaction.Transaction{{ID: 1}, {ID: 2}}
		return m.db
	}
	return m.db
}

func TestFindAll_Positive(t *testing.T) {
	db, _ := gorm.Open(sqlite.Open("file::memory:?cache=shared"), &gorm.Config{})
	repo := transaction.NewRepository(db)

	testDB := &MockDB{db: db}
	repo.(*transaction.Repository).DB = testDB.db

	transactions, err := repo.FindAll()
	if err != nil {
		t.Errorf("FindAll() error = %v, wantErr %v", err, false)
	}
	if len(transactions) != 2 {
		t.Errorf("FindAll() got = %v, want %v", len(transactions), 2)
	}
}

func TestFindAll_Negative(t *testing.T) {
	db, _ := gorm.Open(sqlite.Open("file::memory:?cache=shared"), &gorm.Config{})
	repo := transaction.NewRepository(db)

	testDB := &MockDB{
		db: db.Session(&gorm.Session{SkipDefaultTransaction: true, DryRun: true}),
	}
	repo.(*transaction.Repository).DB = testDB.db

	_, err := repo.FindAll()
	if err == nil {
		t.Errorf("FindAll() error = %v, wantErr %v", err, true)
	}
}

