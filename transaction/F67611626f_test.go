// Test generated by RoostGPT for test golang-crud-api using AI Type Open AI and AI Model gpt-4-1106-preview


package transaction_test

import (
	"errors"
	"transaction"
	"testing"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

func setupDatabase() *gorm.DB {
	db, err := gorm.Open(sqlite.Open("file::memory:?cache=shared"), &gorm.Config{})
	if err != nil {
		panic("failed to connect database")
	}

	// Migrate the schema
	db.AutoMigrate(&transaction.Transaction{})
	return db
}

func TestFindByUser_PositiveCase(t *testing.T) {
	db := setupDatabase()

	// Seed the database with a test transaction
	seed := transaction.Transaction{EmailBuyer: "john@example.com", Amount: 100}
	db.Create(&seed)

	repo := transaction.NewRepository(db)
	result, err := repo.FindByUser("john@example.com")

	if err != nil {
		t.Errorf("FindByUser() returned an error: %v", err)
	}
	if len(result) != 1 || result[0].EmailBuyer != "john@example.com" {
		t.Errorf("FindByUser() failed, expected %v, got %v", seed.EmailBuyer, result[0].EmailBuyer)
	}
}

func TestFindByUser_NegativeCase(t *testing.T) {
	db := setupDatabase()

	// No seeding of the database to simulate no transaction found

	repo := transaction.NewRepository(db)
	result, err := repo.FindByUser("jane@example.com")

	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		t.Errorf("FindByUser() returned an error %v", err)
	}
	if len(result) != 0 {
		t.Errorf("FindByUser() failed, expected 0 transactions, got %v", len(result))
	}
}

